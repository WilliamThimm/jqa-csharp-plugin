<?xml version="1.0" encoding="utf-8"?>
<Simpler>
  <UsingDirectiveSyntax content="using System;">
    <SyntaxToken content="using " />
    <IdentifierNameSyntax content="System">
      <SyntaxToken content="System" />
    </IdentifierNameSyntax>
    <SyntaxToken content=";" />
  </UsingDirectiveSyntax>
  <UsingDirectiveSyntax content="using System.Collections.Generic;">
    <SyntaxToken content="using " />
    <QualifiedNameSyntax content="System.Collections.Generic">
      <QualifiedNameSyntax content="System.Collections">
        <IdentifierNameSyntax content="System">
          <SyntaxToken content="System" />
        </IdentifierNameSyntax>
        <SyntaxToken content="." />
        <IdentifierNameSyntax content="Collections">
          <SyntaxToken content="Collections" />
        </IdentifierNameSyntax>
      </QualifiedNameSyntax>
      <SyntaxToken content="." />
      <IdentifierNameSyntax content="Generic">
        <SyntaxToken content="Generic" />
      </IdentifierNameSyntax>
    </QualifiedNameSyntax>
    <SyntaxToken content=";" />
  </UsingDirectiveSyntax>
  <UsingDirectiveSyntax content="using System.Linq;">
    <SyntaxToken content="using " />
    <QualifiedNameSyntax content="System.Linq">
      <IdentifierNameSyntax content="System">
        <SyntaxToken content="System" />
      </IdentifierNameSyntax>
      <SyntaxToken content="." />
      <IdentifierNameSyntax content="Linq">
        <SyntaxToken content="Linq" />
      </IdentifierNameSyntax>
    </QualifiedNameSyntax>
    <SyntaxToken content=";" />
  </UsingDirectiveSyntax>
  <UsingDirectiveSyntax content="using System.Text;">
    <SyntaxToken content="using " />
    <QualifiedNameSyntax content="System.Text">
      <IdentifierNameSyntax content="System">
        <SyntaxToken content="System" />
      </IdentifierNameSyntax>
      <SyntaxToken content="." />
      <IdentifierNameSyntax content="Text">
        <SyntaxToken content="Text" />
      </IdentifierNameSyntax>
    </QualifiedNameSyntax>
    <SyntaxToken content=";" />
  </UsingDirectiveSyntax>
  <UsingDirectiveSyntax content="using System.Threading.Tasks;">
    <SyntaxToken content="using " />
    <QualifiedNameSyntax content="System.Threading.Tasks">
      <QualifiedNameSyntax content="System.Threading">
        <IdentifierNameSyntax content="System">
          <SyntaxToken content="System" />
        </IdentifierNameSyntax>
        <SyntaxToken content="." />
        <IdentifierNameSyntax content="Threading">
          <SyntaxToken content="Threading" />
        </IdentifierNameSyntax>
      </QualifiedNameSyntax>
      <SyntaxToken content="." />
      <IdentifierNameSyntax content="Tasks">
        <SyntaxToken content="Tasks" />
      </IdentifierNameSyntax>
    </QualifiedNameSyntax>
    <SyntaxToken content=";" />
  </UsingDirectiveSyntax>
  <NamespaceDeclarationSyntax content="namespace simple_coff{    class Program    {        public const double X = 1.0;        public const double Y = 2.0;        public const double Z = 3.0;        public DateTime date;        public int done = 1;        public bool b = true;        public string hello = &quot;World&quot;;        class Program2 {        }        static void notMain(string[] args)        {            int an_integer = 10;            String a_string = &quot;Hello&quot;;             }    }    interface C&lt;out X, in Y, Z&gt;    {        X M(Y y);        Z P { get; set; }    }    public partial class Employee    {        public DateTime DoWork(int number, int number2)        {            GoToLunch();            var date1 = new DateTime(2008, 5, 1, 8, 30, 52);            return date1;        }    }    public partial class Employee    {        public void GoToLunch()        {        }    }    enum ErrorCode : ushort    {        None = 0,        Unknown = 1,        ConnectionLost = 100,        OutlierReading = 200    }    delegate void D(int x);}" name="simple_coff" fqn="simple_coff" access="Public" abstract="False" extern="False" override="False" sealed="False" static="True" virtual="False">
    <SyntaxToken content="namespace " />
    <IdentifierNameSyntax content="simple_coff">
      <SyntaxToken content="simple_coff" />
    </IdentifierNameSyntax>
    <SyntaxToken content="{" />
    <ClassDeclarationSyntax content="    class Program    {        public const double X = 1.0;        public const double Y = 2.0;        public const double Z = 3.0;        public DateTime date;        public int done = 1;        public bool b = true;        public string hello = &quot;World&quot;;        class Program2 {        }        static void notMain(string[] args)        {            int an_integer = 10;            String a_string = &quot;Hello&quot;;             }    }" name="Program" fqn="simple_coff.Program" access="Internal" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
      <SyntaxToken content="    class " />
      <SyntaxToken content="Program" />
      <SyntaxToken content="    {" />
      <FieldDeclarationSyntax content="        public const double X = 1.0;">
        <SyntaxToken content="        public " />
        <SyntaxToken content="const " />
        <VariableDeclarationSyntax content="double X = 1.0">
          <PredefinedTypeSyntax content="double ">
            <SyntaxToken content="double " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="X = 1.0">
            <SyntaxToken content="X " />
            <EqualsValueClauseSyntax content="= 1.0">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="1.0">
                <SyntaxToken content="1.0" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public const double Y = 2.0;">
        <SyntaxToken content="        public " />
        <SyntaxToken content="const " />
        <VariableDeclarationSyntax content="double Y = 2.0">
          <PredefinedTypeSyntax content="double ">
            <SyntaxToken content="double " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="Y = 2.0">
            <SyntaxToken content="Y " />
            <EqualsValueClauseSyntax content="= 2.0">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="2.0">
                <SyntaxToken content="2.0" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public const double Z = 3.0;">
        <SyntaxToken content="        public " />
        <SyntaxToken content="const " />
        <VariableDeclarationSyntax content="double Z = 3.0">
          <PredefinedTypeSyntax content="double ">
            <SyntaxToken content="double " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="Z = 3.0">
            <SyntaxToken content="Z " />
            <EqualsValueClauseSyntax content="= 3.0">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="3.0">
                <SyntaxToken content="3.0" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public DateTime date;">
        <SyntaxToken content="        public " />
        <VariableDeclarationSyntax content="DateTime date">
          <IdentifierNameSyntax content="DateTime ">
            <SyntaxToken content="DateTime " />
          </IdentifierNameSyntax>
          <VariableDeclaratorSyntax content="date">
            <SyntaxToken content="date" />
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public int done = 1;">
        <SyntaxToken content="        public " />
        <VariableDeclarationSyntax content="int done = 1">
          <PredefinedTypeSyntax content="int ">
            <SyntaxToken content="int " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="done = 1">
            <SyntaxToken content="done " />
            <EqualsValueClauseSyntax content="= 1">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="1">
                <SyntaxToken content="1" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public bool b = true;">
        <SyntaxToken content="        public " />
        <VariableDeclarationSyntax content="bool b = true">
          <PredefinedTypeSyntax content="bool ">
            <SyntaxToken content="bool " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="b = true">
            <SyntaxToken content="b " />
            <EqualsValueClauseSyntax content="= true">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="true">
                <SyntaxToken content="true" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <FieldDeclarationSyntax content="        public string hello = &quot;World&quot;;">
        <SyntaxToken content="        public " />
        <VariableDeclarationSyntax content="string hello = &quot;World&quot;">
          <PredefinedTypeSyntax content="string ">
            <SyntaxToken content="string " />
          </PredefinedTypeSyntax>
          <VariableDeclaratorSyntax content="hello = &quot;World&quot;">
            <SyntaxToken content="hello " />
            <EqualsValueClauseSyntax content="= &quot;World&quot;">
              <SyntaxToken content="= " />
              <LiteralExpressionSyntax content="&quot;World&quot;">
                <SyntaxToken content="&quot;World&quot;" />
              </LiteralExpressionSyntax>
            </EqualsValueClauseSyntax>
          </VariableDeclaratorSyntax>
        </VariableDeclarationSyntax>
        <SyntaxToken content=";" />
      </FieldDeclarationSyntax>
      <ClassDeclarationSyntax content="        class Program2 {        }" name="Program2" fqn="simple_coff.Program.Program2" access="Private" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
        <SyntaxToken content="        class " />
        <SyntaxToken content="Program2 " />
        <SyntaxToken content="{" />
        <SyntaxToken content="        }" />
      </ClassDeclarationSyntax>
      <MethodDeclarationSyntax content="        static void notMain(string[] args)        {            int an_integer = 10;            String a_string = &quot;Hello&quot;;             }" name="notMain" fqn="notMain" access="Private" abstract="False" extern="False" override="False" sealed="False" static="True" virtual="False">
        <SyntaxToken content="        static " />
        <PredefinedTypeSyntax content="void ">
          <SyntaxToken content="void " />
        </PredefinedTypeSyntax>
        <SyntaxToken content="notMain" />
        <ParameterListSyntax content="(string[] args)">
          <SyntaxToken content="(" />
          <ParameterSyntax content="string[] args">
            <ArrayTypeSyntax content="string[] ">
              <PredefinedTypeSyntax content="string">
                <SyntaxToken content="string" />
              </PredefinedTypeSyntax>
              <ArrayRankSpecifierSyntax content="[] ">
                <SyntaxToken content="[" />
                <OmittedArraySizeExpressionSyntax content="">
                  <SyntaxToken content="" />
                </OmittedArraySizeExpressionSyntax>
                <SyntaxToken content="] " />
              </ArrayRankSpecifierSyntax>
            </ArrayTypeSyntax>
            <SyntaxToken content="args" />
          </ParameterSyntax>
          <SyntaxToken content=")" />
        </ParameterListSyntax>
        <BlockSyntax content="        {            int an_integer = 10;            String a_string = &quot;Hello&quot;;             }">
          <SyntaxToken content="        {" />
          <LocalDeclarationStatementSyntax content="            int an_integer = 10;">
            <VariableDeclarationSyntax content="            int an_integer = 10">
              <PredefinedTypeSyntax content="            int ">
                <SyntaxToken content="            int " />
              </PredefinedTypeSyntax>
              <VariableDeclaratorSyntax content="an_integer = 10">
                <SyntaxToken content="an_integer " />
                <EqualsValueClauseSyntax content="= 10">
                  <SyntaxToken content="= " />
                  <LiteralExpressionSyntax content="10">
                    <SyntaxToken content="10" />
                  </LiteralExpressionSyntax>
                </EqualsValueClauseSyntax>
              </VariableDeclaratorSyntax>
            </VariableDeclarationSyntax>
            <SyntaxToken content=";" />
          </LocalDeclarationStatementSyntax>
          <LocalDeclarationStatementSyntax content="            String a_string = &quot;Hello&quot;;">
            <VariableDeclarationSyntax content="            String a_string = &quot;Hello&quot;">
              <IdentifierNameSyntax content="            String ">
                <SyntaxToken content="            String " />
              </IdentifierNameSyntax>
              <VariableDeclaratorSyntax content="a_string = &quot;Hello&quot;">
                <SyntaxToken content="a_string " />
                <EqualsValueClauseSyntax content="= &quot;Hello&quot;">
                  <SyntaxToken content="= " />
                  <LiteralExpressionSyntax content="&quot;Hello&quot;">
                    <SyntaxToken content="&quot;Hello&quot;" />
                  </LiteralExpressionSyntax>
                </EqualsValueClauseSyntax>
              </VariableDeclaratorSyntax>
            </VariableDeclarationSyntax>
            <SyntaxToken content=";" />
          </LocalDeclarationStatementSyntax>
          <SyntaxToken content="             }" />
        </BlockSyntax>
      </MethodDeclarationSyntax>
      <SyntaxToken content="    }" />
    </ClassDeclarationSyntax>
    <InterfaceDeclarationSyntax content="    interface C&lt;out X, in Y, Z&gt;    {        X M(Y y);        Z P { get; set; }    }" name="C" fqn="simple_coff.C" access="Internal" abstract="True" extern="False" override="False" sealed="False" static="False" virtual="False">
      <SyntaxToken content="    interface " />
      <SyntaxToken content="C" />
      <TypeParameterListSyntax content="&lt;out X, in Y, Z&gt;">
        <SyntaxToken content="&lt;" />
        <TypeParameterSyntax content="out X">
          <SyntaxToken content="out " />
          <SyntaxToken content="X" />
        </TypeParameterSyntax>
        <SyntaxToken content=", " />
        <TypeParameterSyntax content="in Y">
          <SyntaxToken content="in " />
          <SyntaxToken content="Y" />
        </TypeParameterSyntax>
        <SyntaxToken content=", " />
        <TypeParameterSyntax content="Z">
          <SyntaxToken content="Z" />
        </TypeParameterSyntax>
        <SyntaxToken content="&gt;" />
      </TypeParameterListSyntax>
      <SyntaxToken content="    {" />
      <MethodDeclarationSyntax content="        X M(Y y);" name="M" fqn="M" access="Public" abstract="True" extern="False" override="False" sealed="False" static="False" virtual="False">
        <IdentifierNameSyntax content="        X ">
          <SyntaxToken content="        X " />
        </IdentifierNameSyntax>
        <SyntaxToken content="M" />
        <ParameterListSyntax content="(Y y)">
          <SyntaxToken content="(" />
          <ParameterSyntax content="Y y">
            <IdentifierNameSyntax content="Y ">
              <SyntaxToken content="Y " />
            </IdentifierNameSyntax>
            <SyntaxToken content="y" />
          </ParameterSyntax>
          <SyntaxToken content=")" />
        </ParameterListSyntax>
        <SyntaxToken content=";" />
      </MethodDeclarationSyntax>
      <PropertyDeclarationSyntax content="        Z P { get; set; }">
        <IdentifierNameSyntax content="        Z ">
          <SyntaxToken content="        Z " />
        </IdentifierNameSyntax>
        <SyntaxToken content="P " />
        <AccessorListSyntax content="{ get; set; }">
          <SyntaxToken content="{ " />
          <AccessorDeclarationSyntax content="get; ">
            <SyntaxToken content="get" />
            <SyntaxToken content="; " />
          </AccessorDeclarationSyntax>
          <AccessorDeclarationSyntax content="set; ">
            <SyntaxToken content="set" />
            <SyntaxToken content="; " />
          </AccessorDeclarationSyntax>
          <SyntaxToken content="}" />
        </AccessorListSyntax>
      </PropertyDeclarationSyntax>
      <SyntaxToken content="    }" />
    </InterfaceDeclarationSyntax>
    <ClassDeclarationSyntax content="    public partial class Employee    {        public DateTime DoWork(int number, int number2)        {            GoToLunch();            var date1 = new DateTime(2008, 5, 1, 8, 30, 52);            return date1;        }    }" name="Employee" fqn="simple_coff.Employee" access="Public" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
      <SyntaxToken content="    public " />
      <SyntaxToken content="partial " />
      <SyntaxToken content="class " />
      <SyntaxToken content="Employee" />
      <SyntaxToken content="    {" />
      <MethodDeclarationSyntax content="        public DateTime DoWork(int number, int number2)        {            GoToLunch();            var date1 = new DateTime(2008, 5, 1, 8, 30, 52);            return date1;        }" name="DoWork" fqn="DoWork" access="Public" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
        <SyntaxToken content="        public " />
        <IdentifierNameSyntax content="DateTime ">
          <SyntaxToken content="DateTime " />
        </IdentifierNameSyntax>
        <SyntaxToken content="DoWork" />
        <ParameterListSyntax content="(int number, int number2)">
          <SyntaxToken content="(" />
          <ParameterSyntax content="int number">
            <PredefinedTypeSyntax content="int ">
              <SyntaxToken content="int " />
            </PredefinedTypeSyntax>
            <SyntaxToken content="number" />
          </ParameterSyntax>
          <SyntaxToken content=", " />
          <ParameterSyntax content="int number2">
            <PredefinedTypeSyntax content="int ">
              <SyntaxToken content="int " />
            </PredefinedTypeSyntax>
            <SyntaxToken content="number2" />
          </ParameterSyntax>
          <SyntaxToken content=")" />
        </ParameterListSyntax>
        <BlockSyntax content="        {            GoToLunch();            var date1 = new DateTime(2008, 5, 1, 8, 30, 52);            return date1;        }">
          <SyntaxToken content="        {" />
          <ExpressionStatementSyntax content="            GoToLunch();">
            <InvocationExpressionSyntax content="            GoToLunch()">
              <IdentifierNameSyntax content="            GoToLunch">
                <SyntaxToken content="            GoToLunch" />
              </IdentifierNameSyntax>
              <ArgumentListSyntax content="()">
                <SyntaxToken content="(" />
                <SyntaxToken content=")" />
              </ArgumentListSyntax>
            </InvocationExpressionSyntax>
            <SyntaxToken content=";" />
          </ExpressionStatementSyntax>
          <LocalDeclarationStatementSyntax content="            var date1 = new DateTime(2008, 5, 1, 8, 30, 52);">
            <VariableDeclarationSyntax content="            var date1 = new DateTime(2008, 5, 1, 8, 30, 52)">
              <IdentifierNameSyntax content="            var ">
                <SyntaxToken content="            var " />
              </IdentifierNameSyntax>
              <VariableDeclaratorSyntax content="date1 = new DateTime(2008, 5, 1, 8, 30, 52)">
                <SyntaxToken content="date1 " />
                <EqualsValueClauseSyntax content="= new DateTime(2008, 5, 1, 8, 30, 52)">
                  <SyntaxToken content="= " />
                  <ObjectCreationExpressionSyntax content="new DateTime(2008, 5, 1, 8, 30, 52)">
                    <SyntaxToken content="new " />
                    <IdentifierNameSyntax content="DateTime">
                      <SyntaxToken content="DateTime" />
                    </IdentifierNameSyntax>
                    <ArgumentListSyntax content="(2008, 5, 1, 8, 30, 52)">
                      <SyntaxToken content="(" />
                      <ArgumentSyntax content="2008">
                        <LiteralExpressionSyntax content="2008">
                          <SyntaxToken content="2008" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=", " />
                      <ArgumentSyntax content="5">
                        <LiteralExpressionSyntax content="5">
                          <SyntaxToken content="5" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=", " />
                      <ArgumentSyntax content="1">
                        <LiteralExpressionSyntax content="1">
                          <SyntaxToken content="1" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=", " />
                      <ArgumentSyntax content="8">
                        <LiteralExpressionSyntax content="8">
                          <SyntaxToken content="8" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=", " />
                      <ArgumentSyntax content="30">
                        <LiteralExpressionSyntax content="30">
                          <SyntaxToken content="30" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=", " />
                      <ArgumentSyntax content="52">
                        <LiteralExpressionSyntax content="52">
                          <SyntaxToken content="52" />
                        </LiteralExpressionSyntax>
                      </ArgumentSyntax>
                      <SyntaxToken content=")" />
                    </ArgumentListSyntax>
                  </ObjectCreationExpressionSyntax>
                </EqualsValueClauseSyntax>
              </VariableDeclaratorSyntax>
            </VariableDeclarationSyntax>
            <SyntaxToken content=";" />
          </LocalDeclarationStatementSyntax>
          <ReturnStatementSyntax content="            return date1;">
            <SyntaxToken content="            return " />
            <IdentifierNameSyntax content="date1">
              <SyntaxToken content="date1" />
            </IdentifierNameSyntax>
            <SyntaxToken content=";" />
          </ReturnStatementSyntax>
          <SyntaxToken content="        }" />
        </BlockSyntax>
      </MethodDeclarationSyntax>
      <SyntaxToken content="    }" />
    </ClassDeclarationSyntax>
    <ClassDeclarationSyntax content="    public partial class Employee    {        public void GoToLunch()        {        }    }" name="Employee" fqn="simple_coff.Employee" access="Public" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
      <SyntaxToken content="    public " />
      <SyntaxToken content="partial " />
      <SyntaxToken content="class " />
      <SyntaxToken content="Employee" />
      <SyntaxToken content="    {" />
      <MethodDeclarationSyntax content="        public void GoToLunch()        {        }" name="GoToLunch" fqn="GoToLunch" access="Public" abstract="False" extern="False" override="False" sealed="False" static="False" virtual="False">
        <SyntaxToken content="        public " />
        <PredefinedTypeSyntax content="void ">
          <SyntaxToken content="void " />
        </PredefinedTypeSyntax>
        <SyntaxToken content="GoToLunch" />
        <ParameterListSyntax content="()">
          <SyntaxToken content="(" />
          <SyntaxToken content=")" />
        </ParameterListSyntax>
        <BlockSyntax content="        {        }">
          <SyntaxToken content="        {" />
          <SyntaxToken content="        }" />
        </BlockSyntax>
      </MethodDeclarationSyntax>
      <SyntaxToken content="    }" />
    </ClassDeclarationSyntax>
    <EnumDeclarationSyntax content="    enum ErrorCode : ushort    {        None = 0,        Unknown = 1,        ConnectionLost = 100,        OutlierReading = 200    }" name="ErrorCode" fqn="simple_coff.ErrorCode" access="Internal" abstract="False" extern="False" override="False" sealed="True" static="False" virtual="False">
      <SyntaxToken content="    enum " />
      <SyntaxToken content="ErrorCode " />
      <BaseListSyntax content=": ushort">
        <SyntaxToken content=": " />
        <SimpleBaseTypeSyntax content="ushort">
          <PredefinedTypeSyntax content="ushort">
            <SyntaxToken content="ushort" />
          </PredefinedTypeSyntax>
        </SimpleBaseTypeSyntax>
      </BaseListSyntax>
      <SyntaxToken content="    {" />
      <EnumMemberDeclarationSyntax content="        None = 0">
        <SyntaxToken content="        None " />
        <EqualsValueClauseSyntax content="= 0">
          <SyntaxToken content="= " />
          <LiteralExpressionSyntax content="0">
            <SyntaxToken content="0" />
          </LiteralExpressionSyntax>
        </EqualsValueClauseSyntax>
      </EnumMemberDeclarationSyntax>
      <SyntaxToken content="," />
      <EnumMemberDeclarationSyntax content="        Unknown = 1">
        <SyntaxToken content="        Unknown " />
        <EqualsValueClauseSyntax content="= 1">
          <SyntaxToken content="= " />
          <LiteralExpressionSyntax content="1">
            <SyntaxToken content="1" />
          </LiteralExpressionSyntax>
        </EqualsValueClauseSyntax>
      </EnumMemberDeclarationSyntax>
      <SyntaxToken content="," />
      <EnumMemberDeclarationSyntax content="        ConnectionLost = 100">
        <SyntaxToken content="        ConnectionLost " />
        <EqualsValueClauseSyntax content="= 100">
          <SyntaxToken content="= " />
          <LiteralExpressionSyntax content="100">
            <SyntaxToken content="100" />
          </LiteralExpressionSyntax>
        </EqualsValueClauseSyntax>
      </EnumMemberDeclarationSyntax>
      <SyntaxToken content="," />
      <EnumMemberDeclarationSyntax content="        OutlierReading = 200">
        <SyntaxToken content="        OutlierReading " />
        <EqualsValueClauseSyntax content="= 200">
          <SyntaxToken content="= " />
          <LiteralExpressionSyntax content="200">
            <SyntaxToken content="200" />
          </LiteralExpressionSyntax>
        </EqualsValueClauseSyntax>
      </EnumMemberDeclarationSyntax>
      <SyntaxToken content="    }" />
    </EnumDeclarationSyntax>
    <DelegateDeclarationSyntax content="    delegate void D(int x);" name="D" fqn="simple_coff.D" access="Internal" abstract="False" extern="False" override="False" sealed="True" static="False" virtual="False">
      <SyntaxToken content="    delegate " />
      <PredefinedTypeSyntax content="void ">
        <SyntaxToken content="void " />
      </PredefinedTypeSyntax>
      <SyntaxToken content="D" />
      <ParameterListSyntax content="(int x)">
        <SyntaxToken content="(" />
        <ParameterSyntax content="int x">
          <PredefinedTypeSyntax content="int ">
            <SyntaxToken content="int " />
          </PredefinedTypeSyntax>
          <SyntaxToken content="x" />
        </ParameterSyntax>
        <SyntaxToken content=")" />
      </ParameterListSyntax>
      <SyntaxToken content=";" />
    </DelegateDeclarationSyntax>
    <SyntaxToken content="}" />
  </NamespaceDeclarationSyntax>
  <SyntaxToken content="" />
</Simpler>